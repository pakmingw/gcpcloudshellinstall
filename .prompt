#!/usr/bin/env bash

__powerline() {

    # Unicode symbols
    readonly PS_SYMBOL_DARWIN='>'
    readonly PS_SYMBOL_LINUX='>'
    readonly PS_SYMBOL_OTHER='%'
    readonly GIT_BRANCH_SYMBOL='⑂ '
    readonly GIT_BRANCH_CHANGED_SYMBOL='+'
#    readonly GIT_NEED_PUSH_SYMBOL='⇡'
    readonly GIT_NEED_PUSH_SYMBOL='↑'
#    readonly GIT_NEED_PULL_SYMBOL='⇣'
    readonly GIT_NEED_PULL_SYMBOL='↓'
    readonly PYTHON_SYMBOL='ƨ'

    # My colors
    readonly BG_BLUE="\[$(tput setab 4)\]"
    readonly BG_GREY="\[$(tput setab 248)\]"
    readonly BG_CYAN="\[$(tput setab 6)\]"
    readonly BG_GREEN="\[$(tput setab 2)\]"
    readonly BG_RED="\[$(tput setab 1)\]"
    readonly FG_WHITE="\[$(tput setaf 15)\]"
    readonly BG_MAGENTA="\[$(tput setab 5)\]"

    readonly DIM="\[$(tput dim)\]"
    readonly REVERSE="\[$(tput rev)\]"
    readonly RESET="\[$(tput sgr0)\]"
    readonly BOLD="\[$(tput bold)\]"

    # what OS?
    case "$(uname)" in
	Darwin)
	    readonly PS_SYMBOL=$PS_SYMBOL_DARWIN
	    ;;
	Linux)
	    readonly PS_SYMBOL=$PS_SYMBOL_LINUX
	    ;;
	*)
	    readonly PS_SYMBOL=$PS_SYMBOL_OTHER
    esac

    __git_info() {
		[ -x "$(which git)" ] || return    # git not found

		local git_eng="env LANG=C git"   # force git output in English to make our work easier
		# get current branch name or short SHA1 hash for detached head
		local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"
		[ -n "$branch" ] || return  # git branch not found

		local marks

		# branch is modified?
		[ -n "$($git_eng status --porcelain)" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL"

		# how many commits local branch is ahead/behind of remote?
		local stat="$($git_eng status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
		local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
		local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
		[ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
		[ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"

		# print the git branch segment without a trailing newline
		printf " $GIT_BRANCH_SYMBOL$branch$marks "
	    }

	    __virtualenv() {
	      if [ -z "${VIRTUAL_ENV}" ] ; then
		return
	      else
		local virtualenv="$(basename $VIRTUAL_ENV)"
		printf " $PYTHON_SYMBOL $virtualenv "
	      fi
	    }

	    __new_w() {
		pwd | sed s.$HOME.~.g | awk -F"/" '
  			BEGIN { ORS="/" }
  			END {
  			for (i=1; i<= NF; i++) {
      			if ((i == 1 && $1 != "") || i == NF-1 || i == NF) {
        			print $i
      			}
      			else if (i == 1 && $1 == "") {
        			print "/"$2
        			i++
      			}
      			else {
        			print ".."
      			}
    		}
  			}'
		}

	    ps1() {


        # Check the exit code of the previous command and display different
        # colors in the prompt accordingly.
        if [ $? -eq 0 ]; then
            local BG_EXIT="$BG_GREEN"
        else
            local BG_EXIT="$BG_RED"
        fi

	PS1="$BG_GREY$FG_WHITE $(__new_w) $RESET"
        PS1+="$BG_BLUE$FG_WHITE$(__git_info)$RESET"
        PS1+="$BG_MAGENTA$FG_WHITE$(__virtualenv)$RESET"
        PS1+="$BG_EXIT$FG_WHITE $BOLD$PS_SYMBOL $RESET "
    }

    PROMPT_COMMAND=ps1
}

__powerline

